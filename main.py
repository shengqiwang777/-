# 以下内容需要填写, 根据交易行价格
突破石单价 = 39
守护石十个单价 = 3
破坏石十个单价 = 13
融合材料单价 = 9
碎片单价 = 19 / 500

太阳之恩典单价 = 23
太阳之祝福单价 = 67
太阳之庇护单价 = 149
# 以上内容需要填写


def 强化一次武器单价(破坏石数量, 突破石数量, 融合材料数量, 碎片数量, 手续费):
    return 破坏石数量 / 10 * 破坏石十个单价 + 突破石数量 * 突破石单价 + 融合材料数量 * 融合材料单价 + 碎片数量 * 碎片单价 + 手续费


def 强化一次防具单价(守护石数量, 突破石数量, 融合材料数量, 碎片数量, 手续费):
    return 守护石数量 / 10 * 守护石十个单价 + 突破石数量 * 突破石单价 + 融合材料数量 * 融合材料单价 + 碎片数量 * 碎片单价 + 手续费


def compute(强化单价, 第一次强化的成功率, 每次失败系统赠送成功率, 额外材料费用, 额外成功率):
    expectation = expectation_of_time(
        success_rate=第一次强化的成功率,
        safeguard=0,
        time=1,
        possibility=1,
        system_plus=每次失败系统赠送成功率,
        plus=额外成功率)
    print(f"强化次数的期望为: {expectation}, 总价: {expectation * (强化单价 + 额外材料费用)}")


def 防具():
    # 以下内容需要填写, 下面的例子是防具9->10的
    守护石数量 = 470
    突破石数量 = 11
    融合材料数量 = 6
    碎片数量 = 180
    手续费 = 180
    第一次强化的成功率 = 0.15  # 第一次强化显示的原始成功率
    每次失败系统赠送成功率 = 0.015  # 精炼成功率右边的问号可以看到
    太阳之恩典数量 = 0  # 每次打算使用多少
    太阳之祝福数量 = 0  # 每次打算使用多少
    太阳之庇护数量 = 0  # 每次打算使用多少
    太阳之恩典额外成功率 = 0.21 / 100  # 每个提升多少成功率
    太阳之祝福额外成功率 = 0.42 / 100  # 每个提升多少成功率
    太阳之庇护额外成功率 = 1.25 / 100  # 每个提升多少成功率
    # 以上内容需要填写

    强化单价 = 强化一次防具单价(守护石数量, 突破石数量, 融合材料数量, 碎片数量, 手续费)
    额外材料费用 = 太阳之恩典数量 * 太阳之恩典单价 + 太阳之祝福数量 * 太阳之祝福单价 + 太阳之庇护数量 * 太阳之庇护单价
    额外成功率 = 太阳之恩典额外成功率 * 太阳之恩典数量 + 太阳之祝福额外成功率 * 太阳之祝福数量 + 太阳之庇护额外成功率 * 太阳之庇护数量

    compute(强化单价, 第一次强化的成功率, 每次失败系统赠送成功率, 额外材料费用, 额外成功率)


def 武器():
    # 以下内容需要填写, 下面的例子是武器19->20的
    破坏石数量 = 1614
    突破石数量 = 48
    融合材料数量 = 36
    碎片数量 = 4868
    手续费 = 870
    第一次强化的成功率 = 0.01  # 第一次强化显示的原始成功率
    每次失败系统赠送成功率 = 0  # 精炼成功率右边的问号可以看到
    太阳之恩典数量 = 0  # 每次打算使用多少
    太阳之祝福数量 = 0  # 每次打算使用多少
    太阳之庇护数量 = 0  # 每次打算使用多少
    太阳之恩典额外成功率 = 0.01 / 100  # 每个提升多少成功率
    太阳之祝福额外成功率 = 0.02 / 100  # 每个提升多少成功率
    太阳之庇护额外成功率 = 0.04 / 100  # 每个提升多少成功率
    # 以上内容需要填写

    强化单价 = 强化一次武器单价(破坏石数量, 突破石数量, 融合材料数量, 碎片数量, 手续费)
    额外材料费用 = 太阳之恩典数量 * 太阳之恩典单价 + 太阳之祝福数量 * 太阳之祝福单价 + 太阳之庇护数量 * 太阳之庇护单价
    额外成功率 = 太阳之恩典额外成功率 * 太阳之恩典数量 + 太阳之祝福额外成功率 * 太阳之祝福数量 + 太阳之庇护额外成功率 * 太阳之庇护数量

    compute(强化单价, 第一次强化的成功率, 每次失败系统赠送成功率, 额外材料费用, 额外成功率)


def expectation_of_time(success_rate, safeguard, time, possibility, system_plus, plus=0):
    # 判断是否满足保底条件
    if safeguard >= 100:
        return time * possibility

    real_success_rate = success_rate + plus
    # 成功
    success_expectation = real_success_rate * time * possibility
    # print(success_expectation)

    # 计算强化失败后的新成功率和保底条值
    new_success_rate = success_rate + system_plus
    new_safeguard = real_success_rate * 46.5 + safeguard

    # 返回总的期望次数
    return success_expectation + expectation_of_time(new_success_rate, new_safeguard, time + 1,
                                                     possibility * (1 - real_success_rate), system_plus, plus)


# 按间距中的绿色按钮以运行脚本。
if __name__ == '__main__':
    防具()
    武器()

# 访问 https://www.jetbrains.com/help/pycharm/ 获取 PyCharm 帮助
